import { JOB_UPDATE, JOB_CREATE, JOBS_FETCH_SUCCESS, JOB_DELETE } from './types'
import firebase from 'firebase'


export const jobUpdate = ({prop, value}) => {
  return {
    type: JOB_UPDATE,
    payload: {prop, value}
  }
}

export const jobCreate = ({name, contact, description, title, user}) => {
  //When rendering JobBoard, check UID with jobBoard[key].id
  //If matches, display delete button and call jobDelete

  //title name date contact description
  //id = firebase.auth().UID, remove from param list
  ref = firebase.database().ref(`/jobBoard`)
  let date = new Date()
  // date.getDay()
  console.log(date)
  return (dispatch) => {
    ref.push({name,contact,description,user,title,date})
      .then( () => {
        ref.on('value', snapshot => {
          dispatch({
            type: JOB_CREATE,
            payload: snapshot.val()  
          })
        })
      })
  }
}

export const jobDelete = (key) => {

  ref = firebase.database().ref(`/jobBoard`)

  return (dispatch) => {
    ref.child(key).remove( () => {
        ref.on('value', snapshot => {
          dispatch({
            type: JOB_DELETE, 
            payload: snapshot.val()
          })
        })
    })
  }
  //key should be the one generated by firebase
  //firebase.database().ref(`jobBoard`).remove or set?
  //remove is asynchronous, param is what to do next
  //remove(()=>{do something})
}


export const fetchJobs = () => {
  ref = firebase.database().ref(`/jobBoard`)

  return (dispatch) => {
    ref.on('value', snapshot => {
        dispatch({type: JOBS_FETCH_SUCCESS, payload: snapshot.val()})
    })
  }
}

